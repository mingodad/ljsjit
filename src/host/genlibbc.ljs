//--------------------------------------------------------------------------
// Lua script to dump the bytecode of the library functions written in Lua.
// The resulting 'buildvm_libbc.h' is used for the build process of LuaJIT.
//--------------------------------------------------------------------------
// Copyright (C) 2005-2020 Mike Pall. All rights reserved.
// Released under the MIT license. See Copyright Notice in luajit.h
//--------------------------------------------------------------------------

var ffi = require("ffi");
var bit = require("bit");
var vmdef = require("jit.vmdef");
var bcnames = vmdef.bcnames;

var format = string.format;

var isbe = (string.byte(string.dump(function() { }), 5) % 2 == 1);

var function usage(arg) {
  io.stderr->write("Usage: ", arg && arg[0] || "genlibbc",
		  " [-o buildvm_libbc.h] lib_*.c\n");
  os.exit(1);
}

var function parse_arg(arg) {
  var outfile = "-";
  if( ! (arg && arg[1]) ) {
    usage(arg);
  }
  if( arg[1] == "-o" ) {
    outfile = arg[2];
    if( ! outfile ) { usage(arg); }
    table.remove(arg, 1);
    table.remove(arg, 1);
  }
  return outfile;
}

var function read_files(names) {
  var src = "";
  for( _,name in ipairs(names) ) {
    var fp = assert(io.open(name));
    src = src .. fp->read("*a");
    fp->close();
  }
  return src;
}

var function transform_lua(code) {
  var fixup = {};
  var n = -30000;
  code = string.gsub(code, "CHECK_(%w*)%((.-)%)", function(tp, _v_var) {
    n +=   1;
    fixup[n] = { "CHECK", tp };
    return format("%s=%d", _v_var, n);
  });
  code = string.gsub(code, "PAIRS%((.-)%)", function(_v_var) {
    fixup.PAIRS = true;
    return format("nil, %s, 0", _v_var);
  });
  return "return "..code, fixup;
}

var function read_uleb128(p) {
  var v = p[0]; p +=   1;
  if( v >= 128 ) {
    var sh = 7; v -=   128;
    do {
      var r = p[0];
      v +=   bit.lshift(bit.band(r, 127), sh);
      sh +=   7;
      p +=   1;
    } while(!( r < 128) );
  }
  return p, v;
}

// ORDER LJ_T
var name2itype = {
  str = 5, func = 9, tab = 12, int = 14, num = 15
};

var BC = {};
for( i=0,#bcnames/6-1 ) {
  BC[string.gsub(string.sub(bcnames, i*6+1, i*6+6), " ", "")] = i;
}
var xop, xra = isbe && 3 || 0, isbe && 2 || 1;
var xrc, xrb = isbe && 1 || 2, isbe && 0 || 3;

var function fixup_dump(dump, fixup) {
  var buf = ffi.new("uint8_t[?]", #dump+1, dump);
  var p = buf+5;
  var n, sizebc;
  p, n = read_uleb128(p);
  var start = p;
  p +=   4;
  p = read_uleb128(p);
  p = read_uleb128(p);
  p, sizebc = read_uleb128(p);
  var rawtab = {};
  for( i=0,sizebc-1 ) {
    var op = p[xop];
    if( op == BC.KSHORT ) {
      var rd = p[xrc] + 256*p[xrb];
      rd = bit.arshift(bit.lshift(rd, 16), 16);
      var f = fixup[rd];
      if( f ) {
	if( f[1] == "CHECK" ) {
	  var tp = f[2];
	  if( tp == "tab" ) { rawtab[p[xra]] = true; }
	  p[xop] = tp == "num" && BC.ISNUM || BC.ISTYPE;
	  p[xrb] = 0;
	  p[xrc] = name2itype[tp];
	} else {
	  error("unhandled fixup type: "..f[1]);
	}
      }
    } else if( op == BC.TGETV ) {
      if( rawtab[p[xrb]] ) {
	p[xop] = BC.TGETR;
      }
    } else if( op == BC.TSETV ) {
      if( rawtab[p[xrb]] ) {
	p[xop] = BC.TSETR;
      }
    } else if( op == BC.ITERC ) {
      if( fixup.PAIRS ) {
	p[xop] = BC.ITERN;
      }
    }
    p +=   4;
  }
  return ffi.string(start, n);
}

var function find_defs(src) {
  var defs = {};
  for( name, code in string.gmatch(src, "LJLIB_LUA%(([^)]*)%)%s*/%*(.-)%*/") ) {
    var env = {};
    var tcode, fixup = transform_lua(code);
    var func = assert(load(tcode, "", null, env))();
    defs[name] = fixup_dump(string.dump(func, true), fixup);
    defs[#defs+1] = name;
  }
  return defs;
}

var function gen_header(defs) {
  var t = {};
  var function w(x) { t[#t+1] = x; }
  w("/* This is a generated file. DO NOT EDIT! */\n\n");
  w("static const int libbc_endian = "); w(isbe && 1 || 0); w(";\n\n");
  var s = "";
  for( _,name in ipairs(defs) ) {
    s = s .. defs[name];
  }
  w("static const uint8_t libbc_code[] = {\n");
  var n = 0;
  for( i=1,#s ) {
    var x = string.byte(s, i);
    w(x); w(",");
    n +=   (x < 10 && 2 || (x < 100 && 3 || 4));
    if( n >= 75 ) { n = 0; w("\n"); }
  }
  w("0\n};\n\n");
  w("static const struct { const char *name; int ofs; } libbc_map[] = {\n");
  var m = 0;
  for( _,name in ipairs(defs) ) {
    w('{"'); w(name); w('",'); w(m); w('},\n');
    m +=   #defs[name];
  }
  w("{NULL,"); w(m); w("}\n};\n\n");
  return table.concat(t);
}

var function write_file(name, data) {
  if( name == "-" ) {
    assert(io.write(data));
    assert(io.flush());
  } else {
    var fp = io.open(name);
    if( fp ) {
      var old = fp->read("*a");
      fp->close();
      if( data == old ) { return; }
    }
    fp = assert(io.open(name, "w"));
    assert(fp->write(data));
    assert(fp->close());
  }
}

var outfile = parse_arg(arg);
var src = read_files(arg);
var defs = find_defs(src);
var hdr = gen_header(defs);
write_file(outfile, hdr);

